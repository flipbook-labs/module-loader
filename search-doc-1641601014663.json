[{"title":"Contributing","type":0,"sectionRef":"#","url":"docs/contributing","content":"","keywords":""},{"title":"Getting Started​","type":1,"pageTitle":"Contributing","url":"docs/contributing#getting-started","content":""},{"title":"VS Code​","type":1,"pageTitle":"Contributing","url":"docs/contributing#vs-code","content":"You should be using Visual Studio Code as your text editor and have the following extensions installed: RojoSeleneStyLua Once installed, the Rojo extension will display a welcome screen. Scroll down to the section for the Roblox Studio plugin and select &quot;Manage it for me.&quot; Next time you open a place in Studio you will have the Rojo plugin ready to go. "},{"title":"Foreman​","type":1,"pageTitle":"Contributing","url":"docs/contributing#foreman","content":"Foreman handles the installation of several of our other tools, like Rojo, Wally, Selene, and StyLua. To install through Cargo, run the following: cargo install foreman Copy note The cargo command is a part of Rust. If you don't wish to install Rust on your device you can get the latest Foreman binary from the releases page. To make the tools that Foreman installs avialable on your system you will also need to manually add its bin folder to your PATH: Windows Add C:\\Users\\You\\.foreman\\bin to your PATHFollow this guide for how to do that MacOS Open TerminalOpen the corresponding file for your terminal Bash: nano ~/.bash_profileZSH: nano ~/.zshrc Append export PATH=&quot;$PATH:~/.foreman/bin to the end of the file tip Changes to the PATH will only take effect in new terminals. If you are not able to invoke the tools that Foreman manages, try closing and reopening your terminal. "},{"title":"Development​","type":1,"pageTitle":"Contributing","url":"docs/contributing#development","content":"With the above requirements satisfied, run the following commands from your clone of this repository to start developing: # Install Rojo, Wally, Selene, StyLua, and others foreman install # Install this package's dependencie wally install # Serve the project rojo serve dev.project.json Copy Now you can open Studio to a new Baseplate and start syncing with the Rojo plugin. "},{"title":"Testing​","type":1,"pageTitle":"Contributing","url":"docs/contributing#testing","content":"While developing, you should also be writing unit tests. Unit tests are written in .spec.lua files. You can see examples of this throughout the repository's codebase. To run tests, simply start the experience in Studio. You will see in the output if tests are passing or failing. If your code is not properly tested, maintainers will let you know and offer suggestions on how to improve your tests so you can get your pull request merged. "},{"title":"ModuleLoader","type":0,"sectionRef":"#","url":"api/ModuleLoader","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"ModuleLoader","url":"api/ModuleLoader#properties","content":" "},{"title":"loadedModuleChanged​","type":1,"pageTitle":"ModuleLoader","url":"api/ModuleLoader#loadedModuleChanged","content":"&lt;/&gt; ModuleLoader.loadedModuleChanged: RBXScriptSignal  Fired when any ModuleScript required through this class has its ancestry or Source property changed. This applies to the ModuleScript passed to ModuleLoader:require() and every module that it subsequently requirs. This event is useful for reloading a module when it or any of it dependencies change. local loader = ModuleLoader.new() local result = loader:require(module) loader.loadedModuleChanged:Connect(function() loader:clear() result = loader:require(module) end)  "},{"title":"Functions​","type":1,"pageTitle":"ModuleLoader","url":"api/ModuleLoader#functions","content":" "},{"title":"new​","type":1,"pageTitle":"ModuleLoader","url":"api/ModuleLoader#new","content":"&lt;/&gt; ModuleLoader.new() → () Constructs a new ModuleLoader instance.  "},{"title":"cache​","type":1,"pageTitle":"ModuleLoader","url":"api/ModuleLoader#cache","content":"&lt;/&gt; ModuleLoader:cache( module: ModuleScript , source: any ) → () Set the cached value for a module before it is loaded. This is useful is very specific situations. For example, this method is used to cache a copy of Roact so that when a module is loaded with this class it uses the same table instance. local moduleInstance = script.Parent.ModuleScript local module = require(moduleInstance) local loader = ModuleLoader.new() loader:cache(moduleInstance, module)   "},{"title":"require​","type":1,"pageTitle":"ModuleLoader","url":"api/ModuleLoader#require","content":"&lt;/&gt; ModuleLoader:require(module: ModuleScript ) → () Require a module with a fresh ModuleScript require cache. This method is functionally the same as running require(script.Parent.ModuleScript), however in this case the module is not cached. As such, if a change occurs to the module you can call this method again to get the latest changes. local loader = ModuleLoader.new() local module = loader:require(script.Parent.ModuleScript)   "},{"title":"clear​","type":1,"pageTitle":"ModuleLoader","url":"api/ModuleLoader#clear","content":"&lt;/&gt; ModuleLoader:clear() → () Clears out the internal cache. While this module bypasses Roblox's ModuleScript cache, one is still maintained internally so that repeated requires to the same module return a cached value. This method should be called when you need to require a module again. i.e. if the module's Source has been changed. local loader = ModuleLoader.new() loader:require(script.Parent.ModuleScript) -- Later... -- Clear the cache and require the module again loader:clear() loader:require(script.Parent.ModuleScript)  "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"docs/intro","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Getting Started","url":"docs/intro#installation","content":"Installing the package is quick and easy whether you use a package manager like Wally or work directly in Studio. "},{"title":"Wally (Recommended)​","type":1,"pageTitle":"Getting Started","url":"docs/intro#wally-recommended","content":"Add the following to your wally.toml and run wally install to download the package. [dependencies] ModuleLoader = &quot;vocksel/module-loader@0.3.1&quot; Copy Make sure the resulting Packages folder is synced into your experience using a tool like Rojo. "},{"title":"Roblox Studio​","type":1,"pageTitle":"Getting Started","url":"docs/intro#roblox-studio","content":"Download a copy of the rbxm from the releases page under the Assets section.Drag and drop the file into Roblox Studio to add it to your experience. "},{"title":"Next Steps​","type":1,"pageTitle":"Getting Started","url":"docs/intro#next-steps","content":"Check out the API reference for everything that the package exposes. "}]